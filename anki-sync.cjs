const data = [
  {
    highlight: "seasoned",
    context:
      "create-t3-app is a CLI built by seasoned T3 Stack devs to streamline the setup of a modular T3 Stack app.",
    explanation:
      "In this context, 'seasoned' means very experienced or skilled, especially through long practice.",
    examples: [
      "She's a seasoned developer with over 10 years of experience in full-stack development.",
      "The company hired a seasoned designer to lead their new product's interface.",
    ],
    link: "https://create.t3.gg/en/introduction#typesafety-isnt-optional",
  },
  {
    highlight: "generated",
    context:
      "This means each piece is optional, and the “template” is generated based on your specific needs.",
    explanation:
      "Here, 'generated' means created or produced automatically, usually by a tool or program.",
    examples: [
      "The report was generated by the software in under a minute.",
      "Each user gets a unique ID generated during the signup process.",
    ],
    link: "https://create.t3.gg/en/introduction#typesafety-isnt-optional",
  },
  {
    highlight: "frank",
    context: "We'll be frank - this is an opinionated project.",
    explanation:
      "In this sentence, 'frank' means being honest and direct, even if the truth is uncomfortable.",
    examples: [
      "To be frank, I don't think this approach will work.",
      "He was frank about the challenges the team was facing.",
    ],
    link: "https://create.t3.gg/en/introduction#typesafety-isnt-optional",
  },
  {
    highlight: "integrate",
    context:
      "This means we won't add things like state libraries (zustand, redux) but we will add things like NextAuth.js and integrate Prisma and tRPC for you.",
    explanation:
      "In this context, 'integrate' means to combine or include something as part of a larger system so that it works well with other parts.",
    examples: [
      "The new payment system will be integrated into our website next week.",
      "We need to integrate the new library with our existing codebase.",
    ],
    link: "https://create.t3.gg/en/introduction#typesafety-isnt-optional",
  },
  {
    highlight: "trivial",
    context:
      "But we happily ✅ bet on tRPC since it's just functions that are trivial to move off.",
    explanation:
      "Here, 'trivial' means very simple or easy to do, not complicated or important.",
    examples: [
      "Fixing the bug was trivial once we found the root cause.",
      "The task may seem trivial, but it's essential for quality control.",
    ],
    link: "https://create.t3.gg/en/introduction#typesafety-isnt-optional",
  },
];

async function invokeAnkiConnect(action, params = {}) {
  const response = await fetch("http://localhost:8765", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      action,
      version: 6,
      params,
    }),
  });
  return response.json();
}

async function addNote(highlight, context, explanation, examples, link) {
  // Replace the highlight word with bold version in context
  const boldContext = context.replace(
    new RegExp(highlight, 'gi'),
    `<b>$&</b>`
  );

  const note = {
    deckName: "Default",
    modelName: "问题模板",
    fields: {
      问题: boldContext,
      答案: `${explanation}<br>${examples
        .map((example) => `- ${example}`)
        .join("<br>")}`,
      相关知识: `<a href="${link}">${link}</a>`,
    },
    options: {
      allowDuplicate: false,
      duplicateScope: "deck",
    },
  };

  try {
    const result = await invokeAnkiConnect("addNote", { note });
    console.log(`Added note for: ${highlight}`);
    return result;
  } catch (error) {
    console.error(`Error adding note for ${highlight}:`, error);
    return null;
  }
}

async function syncToAnki() {
  console.log("Starting sync to Anki...");

  for (const item of data) {
    await addNote(
      item.highlight,
      item.context,
      item.explanation,
      item.examples,
      item.link
    );
  }

  console.log("Sync completed!");
}

// Run the sync
syncToAnki().catch(console.error);
